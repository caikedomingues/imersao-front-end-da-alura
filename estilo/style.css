
/*Primeiro vamos selecionar o campo da página que iremos modificar*/

body{

    background-color: #000;

    /*Utilizando a fonte definida no arquivo
    da raiz do css.*/
    /*Agora, se quisermos, podemos apagar os outros font-family
    que utilizamos anteriormente, pois, estamos definindo a fonte
    no body, ou seja, na página inteira*/
    font-family: var(--font-dm-sans);
}


h1{

    color: white;
}


.sidebar{

    /*O valor fixed da propriedade position em CSS é uma ferramenta
    poderosa para criar elementos quen permanecem fixos na tela,
    independemente da rolagem da página. Imagine um menu de navegação
    que sempre fica visivel no topo da tela mesmo que você role 
    para baixo. Essa é uma das aplicações mais comuns do position: fixed.*/
    position: fixed;

    /*Em CSS, a propriedade top serve para posicionar um elemento em
    relação á sua posição original ou a um ponto de referência definido*/
    /*Como funciona:
    Posição relativa: Quando um elemento tem position: relative, a propriedade top move o elemento para baixo a partir de sua posição
    original. Um valor positivo move o elemento para baixo, enquanto um
    valor negativo move para cima.

    Posição absoluta: Se um elemento tem position: absolute, a propriedade top posiciona o elemento de uma determinada distância 
    da borda superior do seu elemento pai mais próximo que tiver um
    valor de position diferente de static.

    Posição fixa: Com position =  fixed, a propriedade top posiciona o elemento a uma determinada distância da borda superior da viewport (área visivel da página).
    */
    top: 0;

    /*A propriedade left em CSS serve para posicionar um elemento em relação a sua borda esquerda. Essa propriedade é fundamental
    para criar layouts personalizados e organizar os elementos de uma
    página da web de forma precisa.*/

    /*Como funciona:
    Posição relativa: Quando um elemento tem position: relative, a propriedade left move o elemento para a esquerda a partir da sua
    posição original. Um valor positivo move o elemento para a direita, enquanto um valor negativo move para a esquerda.

    Posição Absoluta: Se um elemento tem position: absolute, a propriedade left posiciona o elemento a uma determinada distância
    da borda esquerda do seu elemento pai mais próximo que tiver um valor position diferente de static.
    
    Posição fixa: Com position: fixed, a propriedade left posiciona o elemento a uma determinada distância da borda esquerda da viewport (área visivel da página).
    */

    left: 0;

    /*Em CSS, a propriedade bottom serve para posicionar um elemento em relação á sua borda inferior. Assim como as propriedades top, left, right, bottom é utilizado em um conjunto com a propriedade position para definir a posição exata de um elemento na página*/
    
    /*Como funciona:
    posição relativa: Quando um elemento tem position: relative, a propriedade bottom move o elemento para cima a partir de sua posição original. Um valorpositivo move o elemento para cima, enquanto um valor negativo move para baixo.

    posição absoluta: Se um elemento tem position: absolute, a propriedade bottom posiciona o elemento a uma determinada distância da borda inferior do seu elemento pai mais próximo que tiver um valor de position diferente de static. 

    posição fixa: Com position: fixed, a propriedade bottom posiciona o elemento a uma determinada distância da borda inferior da viewport (área visivel da página).
    */
    bottom: 0;

    padding: 12px;

    width: 300px;

}

.sidebar_navigation{

    background-color: #121212;

    border-radius: 8px;

    padding: 16px 0 0 16px;


}

.sidebar_navigation .logo{

    background-color: #121212;

    display: flex;

    border-radius: 8px;

    padding: 16px 0 0 16px;
}

.sidebar_navigation .logo img{

    width: 80px;

}

.sidebar nav ul{

    margin-top: 20px;
    padding: 0 20px 10px 20px;
    
}

.sidebar ul li{

    padding: 10px 0;

}

.sidebar nav ul li a{

    color: #b3b3b3;
    text-decoration: none;
    /*O font-weight serve para definir a espessura da fonte*/
    font-weight: 600px;
    font-size: 14px;
}

.library{

    background-color: #121212;

    border-radius: 8px;

    display: flex;

    /*É fundamental para controlar o alinhamento dos itens dentro de um
    container flex ou grid, mas ele atua de forma diferente do align-items. O justify-content define como os itens serão posicionados ao longo do eixo principal (main axis) do layout.
    Isso significa que ele controla o  alinhamento horizontal dos itens
    dentro do container.*/

    /*Valores comuns e seus significados
    Flex-start: Os itens são alinhados no inicio do eixo principal

    flex-end: Os itens são alinhados no final do eixo principal

    center: Os itens são centralizados horizontalmente dentro
    do container.

    space-between: Os itens são distribuidos uniformemente, com espaço
    igual entre eles, e o primeiro item fica no inicio e o último no
    final.

    space-around: Os itens são distribuidos uniformente, com espaço igual
    entre eles, e metade do espaço é adicionada no inicio e no final. 
    */

    justify-content: space-between;

    flex-direction: column;

    padding: 4px 8px;

    color: #b3b3b3;

    font-weight: 600px;

    font-size: 14px;

    /*Esse é o margin que eu defini o valor*/
    margin-bottom: 6500px;

    /*Margin-right que eu defini*/
    margin-right: 1800px;

}

.library .library_content{

    display: flex;

    justify-content: space-between;

}

.library .library_button{

    display: flex;

    margin-right: 10px;

    color: #b3b3b3;

    background-color: transparent;

    border: 0px;

    font-size: 14px;

    font-weight: 700;

    text-align: center;
    
    text-decoration: none;

    text-transform: none;

    padding: 20px 10px;

}

.library .library_button .fa{

    font-size: 20px;

    margin-right: 10px;

    font-weight: 300;
    
    padding-right: 8px;
}

.library .library_content .fa-plus{

    margin: 24px 10px;

}

.section-playlist{

    display: flex;

    /*O align-items é uma propriedade CSS fundamental para controlar o
    alinhamento dos itens dentro de um container flex ou grid. Ele 
    define como os itens serão posicionados ao longo dos eixos cruzados
    (cross aixis), que é perpendicular ao eixo principal (main axis)
    do layout.*/

    /*Valores comuns e seus significados:
    Stretch: Os itens se esticam para ocupar todo o espaço disponivel
    no eixo cruzado.

    center: Os itens são centralizados verticalmente dentro do container.

    flex-start: Os itens são alinhados no inicio do eixo cruzado.

    baseline: Os itens são alinhados pela suas linhas base.
    */
    align-items: flex-start;
    
    justify-content: space-between;

    gap:20px;

    color: #b3b3b3;

    font-weight: 600;

    font-size: 14px;

    background-color: #242424;

    margin: 8px 0px;

    padding: 16px 20px;

    border-radius: 10px;

}

.section-playlist .section-playlist_content{

    display: flex;
    
    flex-direction: column;

}

.section-playlist_content .text{

    padding-bottom: 14px;

    color: #fff;
}

.section-playlist_content .title{

    font-weight: 700;  
}

.section-playlist_content .subtitle{

    font-weight: 500;

    font-size: 12px;

}


.section-playlist_content .section-playlist_button{

    display: flex;

    justify-content: center;

    background-color: #fff;

    color: #000;

    border-radius: 20px;

    font-size: 12px;

    font-weight: 700px;

    text-decoration: none;

    text-transform: none;

    padding:10px;

    border: 0px;

    width: 113px;

    margin-top: 12px;
}

.sidebar .cookies{

    margin: 25px 20px;
    
}

.cookies a{

    color:#b3b3b3;

    font-weight: 500;

    font-size: 10px;

    text-decoration: none;
}


/*Pseudo-classes: são como "apelidos" que você dá a elementos HTML
para estiliza-los de forma diferente dependendo do estado que se 
encontram. Imagine que você tem um botão: você pode querer que ele
mude de cor quando o mousse passar por cima ou que ele tenha um 
visual diferente quando for clicado. As pseudo-classes permitem 
que você faça isso sem precisar de JavaScript.*/
.cookies a:hover{

    text-decoration: underline;

}

.languages .languages_button{

    background-color: transparent;

    border: 1px solid #878787;

    color: #fff;

    cursor: pointer;

    align-items: center;

    font-weight: bold;

    width: 170px;

    margin: 8px;

    padding: 8px;

    border-radius: 20px;
}

.disclaimer-premium{

    position: fixed;

    bottom: 0;

    left: 0;

    right: 0;

    background: linear-gradient(to right, #ae2896, #509bf5);

    padding: 15px 40px;

    display: flex;

    justify-content: space-between;


}


.disclaimer-premium .text{

    flex-shrink: 0;
}

.disclaimer-premium .disclaimer-premium_title{

    color:#ffffff;

    text-transform: uppercase;

    font-weight: 400;

    font-size: 12px;

    margin-bottom: 10px;
}

.disclaimer-premium .disclaimer-premium_subtitle{

    color:#ffffff;

    font-size: 14px;

    font-weight: 500;
}

.disclaimer-premium button{

    background-color: #ffffff;

    color: #000000;

    font-size: 16px;

    font-weight: bold;

    padding: 14px 30px;

    border: 0px;

    border-radius: 40px;

    cursor: pointer;

    flex-shrink: 0;
}